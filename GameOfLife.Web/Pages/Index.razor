@page "/"

<div class="btn-group" role="group">
    <div class="input-group mb-3">
        <div class="input-group-prepend">
            <span class="input-group-text" id="basic-addon1" >Grid Size</span>
        </div>
        <input type="text" class="form-control" placeholder="Grid Size" @bind="Size">
        <div class="input-group-prepend">
            <span class="input-group-text" id="basic-addon1">Speed (FPS)</span>
        </div>
        <input type="text" class="form-control" placeholder="FPS" @bind="Speed">
        <div class="input-group-prepend">
            <span class="input-group-text" id="basic-addon1">Seed %</span>
        </div>
        <input type="text" class="form-control" placeholder="Seed %" @bind="Seed">
        <div class="input-group-append">
            <button class="btn btn-primary" @onclick="StartWorld">Start</button>
            <button class="btn btn-primary" @onclick="StopWorld">Stop</button>
        </div>
    </div>
</div>


<div id="world">
    @for (var x = 0; x < _gameOfLife2dArray.World.GetLength(0); x++)
    {
        <div class="row">
            @for (var y = 0; y < _gameOfLife2dArray.World.GetLength(1); y++)
            {
                <div class="column @SizeClass() @State(x, y)"></div>
            }
        </div>
    }
</div>

@code
{
    private int _speed = 100;
    private int Speed
    {
        get => _speed;
        set
        {
            _speed = value;
            _speed = _speed > 100 ? 100 : _speed < 1 ? 1 : _speed;
        }
    }

    private int _size = 35;
    private int Size
    {
        get => _size;
        set
        {
            _size = value;
            _size = _size > 100 ? 100 : _size < 4 ? 4 : _size;
        }
    }

    private int _seed = 10;
    private int Seed
    {
        get => _seed;
        set
        {
            _seed = value;
            _seed = _seed > 100 ? 100 : _seed < 1 ? 1 : _seed;
        }
    }
    
    private GameOfLife2dArray _gameOfLife2dArray;
    private bool Stop;

    protected override async Task OnInitializedAsync()
    {
        _gameOfLife2dArray = new GameOfLife2dArray(Size);
        _gameOfLife2dArray.RandomSeed(Seed);

        await base.OnInitializedAsync();
    }

    private string SizeClass()
    {
        if (Size > 75) return "oneHundred";
        if (Size > 50) return "seventyFive";
        if (Size > 25) return "fifty";

        return "twenty";
    }

    private void Tick()
    {
        _gameOfLife2dArray.Tick();
    }

    private void StartWorld()
    {
        _gameOfLife2dArray = new GameOfLife2dArray(Size);
        _gameOfLife2dArray.RandomSeed(Seed);
        StateHasChanged();
        
        Task.Run(
            async () =>
            {
                Stop = false;
                do
                {
                    await Task.Delay(Speed);

                    _gameOfLife2dArray.Tick();
                    StateHasChanged();
                } while (!Stop);
            });
    }

    private void StopWorld()
    {
        Stop = true;
    }

    private string State(int x, int y)
    {
        return _gameOfLife2dArray.World[x, y] ? "alive" : "dead";
    }
}